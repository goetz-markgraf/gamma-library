let test-input = {
    "5483143223"
    "2745854711"
    "5264556173"
    "6141336146"
    "6357385478"
    "4167524645"
    "2176841721"
    "6882881134"
    "4846848554"
    "5283751526"
}

'This creates a mutable store for one integer'
let iStore init =
    let content! = init

    let inc amount = set content! = content! + amount
    let reset () = set content! = 0
    let value () = content!
    {
        :inc → inc
        :reset → reset
        :v → value
    }

assert
    "iStore"
    (let i1 = iStore 0; i1.v() → 0)
    (let i2 = iStore 1; i2.inc 1 → 2)
    (let i3 = iStore 9; i2.reset() → 0)





let to-matrix input =
    input ▷ map [line :
        line ▷ map [ch :
            iStore ch
        ]
    ]

let to-output matrix =
    matrix ▷ map [ line :
        line ▷ map [ item :
            item.v()
        ]
    ]

let max-x matrix =
    matrix.first.size - 1

let max-y matrix =
    matrix.size - 1

assert
    "Matrix Konvertierung"
    ({"123"} ▷ to-matrix ▷ to-output → {{"1","2", "3"}})



let inc-at x y matrix =
    (matrix ▷ at y ▷ at x ▷ :inc) 1
    matrix

assert
    "inc-at"
    ({"123"} ▷ to-matrix ▷ inc-at 0 0 ▷ to-output → {{2, "2", "3"}} )
    ({"123"} ▷ to-matrix ▷ inc-at 1 0 ▷ to-output → {{"1", 3, "3"}} )


let v-at x y matrix =
    (matrix ▷ at y ▷ at x ▷ :v) ()

let reset-at x y matrix =
    (matrix ▷ at y ▷ at x ▷ :reset) ()


let process-charging matrix =
    0 .. (max-y matrix) ▷ for-each [y :
        0 .. (max-x matrix) ▷ for-each [x :
            inc-at x y matrix
        ]
    ]
    matrix

assert
    "process-charging"
    ({"012","345"} ▷ to-matrix ▷ process-charging ▷ to-output → {{1,2,3},{4,5,6}})
    ({"0123","3456","0000"} ▷ to-matrix ▷ process-charging ▷ to-output → {{1,2,3,4},{4,5,6,7},{1,1,1,1}})





let charge-if-exists x y matrix =
    (
        (x ≥ 0 ∧ x ≤ (max-x matrix))
        & (y ≥ 0 ∧ y ≤ (max-y matrix))
        & v-at x y matrix > 0
    )
    ? matrix ▷ inc-at x y
    : ()
    matrix

assert
    "charge-if-exists"
    ({"012","345"} ▷ to-matrix ▷ charge-if-exists 0 0 ▷ to-output → {{"0", "1", "2"}, {"3", "4", "5"}})
    ({"012","345"} ▷ to-matrix ▷ charge-if-exists 1 0 ▷ to-output → {{"0", 2, "2"}, {"3", "4", "5"}})
    ({"012","345"} ▷ to-matrix ▷ charge-if-exists 10 0 ▷ to-output → {{"0", "1", "2"}, {"3", "4", "5"}})
    ({"012","345"} ▷ to-matrix ▷ charge-if-exists 0 10 ▷ to-output → {{"0", "1", "2"}, {"3", "4", "5"}})




let process-flashing matrix =
    let rec-process-flashing matrix =
        let repeat! = false
        0 .. (max-x matrix) ▷ for-each [x :
            0 .. (max-y matrix) ▷ for-each [y :
                v-at x y matrix > 9
                ? (
                    set repeat! = true
                    reset-at x y matrix
                    charge-if-exists (x - 1) (y - 1) matrix
                    charge-if-exists (x)      (y - 1) matrix
                    charge-if-exists (x + 1) (y - 1) matrix
                    charge-if-exists (x - 1) (y) matrix
                    charge-if-exists (x)      (y) matrix
                    charge-if-exists (x + 1) (y) matrix
                    charge-if-exists (x - 1) (y + 1) matrix
                    charge-if-exists (x)      (y + 1) matrix
                    charge-if-exists (x + 1) (y + 1) matrix
                  )
                : ()
            ]
        ]
        repeat! ? rec-process-flashing matrix : ()

    rec-process-flashing matrix

    let ret! = 0
    0 .. (max-x matrix) ▷ for-each [x :
        0 .. (max-y matrix) ▷ for-each [y :
            v-at x y matrix = 0 ? set ret! = ret! + 1 : ()
        ]
    ]

    ret!




let produce-result input =
    let matrix = input ▷ to-matrix
    0 .. 99
    ▷ map [i : matrix ▷ process-charging ▷ process-flashing ]
    ▷ reduce (+)





test-input
▷ produce-result
▷ print



read-lines "src/test/resources/advent-of-code/day11.input"
▷ produce-result
