let test-input = {
    "0,9 -> 5,9"
    "8,0 -> 0,8"
    "9,4 -> 3,4"
    "2,2 -> 2,1"
    "7,0 -> 7,4"
    "6,4 -> 2,0"
    "0,9 -> 2,9"
    "3,4 -> 1,4"
    "0,0 -> 8,8"
    "5,5 -> 8,2"
}



let max a b =
    a > b ? a : b

assert
    "max"
    (max 1 2 → 2)
    (max "1" "2" → "2")
    (max "2" "11" → "11")

let min a b =
    a < b ? a : b

assert
    "min"
    (min 1 2 → 1)
    (min "1" "2" → "1")
    (min "2" "11" → "2")






let split-line-into-coordinates line =
    let components = split line
    let start-cmd = split-by "," components.first
    let end-cmd = split-by "," components.last

    (start-cmd.first + 0 → start-cmd.last + 0) → (end-cmd.first + 0 → end-cmd.last + 0)

assert
    "split-line-into-coordinates"
    (split-line-into-coordinates "0,9 → 5,9" → {{0,9},{5,9}})
    (split-line-into-coordinates "8,0 → 0,8" → {{8,0},{0,8}})






let make-line coord =
    let make-horizontal-line coord =
        coord.first.first .. coord.last.first ▷ map [it : {it, coord.first.last}]

    let make-vertical-line coord =
        coord.first.last .. coord.last.last ▷ map [it : {coord.first.first, it}]

    let make-diagonal-line coord =
        let y-delta = coord.first.last < coord.last.last ? 1 : -1

        coord.first.first .. coord.last.first ▷ map* [x-pos i :
            x-pos → coord.first.last + i * y-delta
        ]

    when
        (coord.first.first = coord.last.first → make-vertical-line coord)
        (coord.first.last = coord.last.last → make-horizontal-line coord)
        (else → make-diagonal-line coord)

assert
    "make-line"
    (make-line {{0,0},{2,0}} → {{0,0},{1,0},{2,0}})
    (make-line {{0,2},{0,0}} → {{0,2},{0,1},{0,0}})
    (make-line {{0,0},{2,2}} → {{0,0},{1,1},{2,2}})
    (make-line {{0,2},{2,0}} → {{0,2},{1,1},{2,0}})





let make-key coord =
    join-by "" coord.first "-" coord.last

assert
    "make-key"
    (make-key {1,2} → "1-2")





let get-value key field =
    let current = field ▷ at* key
    current = () ? 0 : current

assert
    "get-value"
    (r* {"1-2" → 1} ▷ get-value "1-2" → 1)
    (r* {"1-2" → 1} ▷ get-value "1-3" → 0)






let fill-line field line =
    let rec-map =
        line ▷ map [coord :
            let key = make-key coord
            let current = field ▷ get-value key
            key → current + 1
        ]

    field ▷ copy-with rec-map

assert
    "fill-line"
    ({{1,1},{1,2}} ▷ fill-line (r* {}) → r* {"1-1" → 1, "1-2" → 1})
    ({{1,1},{1,2}} ▷ fill-line (r* {"1-1" → 1}) → r* {"1-1" → 2, "1-2" → 1})






let set-positions-from-line field line =
    is-empty? line
    ? field
    : make-line line ▷ fill-line field

assert
    "set-positions-from-line"
    ({{0,0},{0,2}} ▷ set-positions-from-line (r* {}) →
                r* {"0-0" → 1, "0-1" → 1, "0-2" → 1})
    ({{0,0},{0,2}} ▷ set-positions-from-line (r* {"0-0" → 1, "4-4" → 1}) →
                r* {"0-0" → 2, "0-1" → 1, "0-2" → 1, "4-4" → 1})
    ({} ▷ set-positions-from-line (r* {"0-0" → 1, "4-4" → 1}) →
                r* {"0-0" → 1, "4-4" → 1})






let count-fields-over-1 field =
    let properties = field ▷ get-properties
    properties
    ▷ map [prop : field ▷ at prop]
    ▷ filter [val : val > 1]
    ▷ map [val : 1]
    ▷ fold 0 (+)

assert
    "count-fields-over-1"
    (r* {"1-1" → 1, "1-2" → 2} ▷ count-fields-over-1 → 1 )
    (r* {"1-1" → 3, "1-2" → 2} ▷ count-fields-over-1 → 2 )






let produce-result input =
    let lines =
        input
        ▷ map split-line-into-coordinates
        ▷ map make-line

    let field = r* { }

    let final-field = lines ▷ fold field [acc line : set-positions-from-line acc line]

    final-field ▷ count-fields-over-1





test-input
▷ produce-result
▷ print


read-lines "src/test/resources/advent-of-code/day5.input"
▷ produce-result
