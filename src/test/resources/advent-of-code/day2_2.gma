let test-input = {
    "forward 5"
    "down 5"
    "forward 8"
    "up 3"
    "down 8"
    "forward 2"
}



let calculate-position start list =
    let calc-movement cmd-line =
        let cmd-list = split cmd-line
        let cmd = cmd-list.first
        let amount = cmd-list.last

        when {
            cmd = "forward" -> { :forward -> amount, :depth -> start.aim * amount, :aim -> 0}
            cmd = "up" -> {:forward -> 0, :depth -> 0, :aim -> neg amount}
            cmd = "down" -> { :forward -> 0, :depth -> 0, :aim -> amount}
            else -> { :forward -> 0, :depth -> 0, :aim -> 0}
        }

    when {
        is-empty? list -> start
        else -> (
            let delta-movement = calc-movement list.head
            let new-position =
                {
                    :forward -> start.forward  + delta-movement.forward
                    :depth -> start.depth + delta-movement.depth
                    :aim -> start.aim + delta-movement.aim
                }
            calculate-position new-position list.tail
        )
    }



let test-result = calculate-position {:forward -> 0, :depth -> 0, :aim -> 0} test-input

print (test-result.depth * test-result.forward)



let result =
    read-lines "src/test/resources/advent-of-code/day2.input"
    |> calculate-position {:forward -> 0, :depth -> 0, :aim -> 0}

result.depth * result.forward
