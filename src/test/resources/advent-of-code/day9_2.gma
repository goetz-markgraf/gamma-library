let test-input = {
    "2199943210"
    "3987894921"
    "9856789892"
    "8767896789"
    "9899965678"
}


let make-2d-field input =
    input ▷ map [line : line ▷ map [ch : ch]]


let test-field =
    test-input ▷ make-2d-field




let get-value x y field =
    field ▷ at* y ▷ at* x

assert
    "get-value"
    (get-value 0 0 {{0,1,2},{3,4,5}} → 0)
    (get-value 10 0 {{0,1,2},{3,4,5}} → () )
    (get-value 10 10 {{0,1,2},{3,4,5}} → () )
    (get-value 2 1 {{0,1,2},{3,4,5}} → 5)






let is-low? x y field =
    let current = field ▷ get-value x y
    let x-max = field.first.size - 1
    let y-max = field.size - 1

    (x ≤ 0 ∨ (field ▷ get-value (x - 1) y) > current)
    ∧
    (y ≤ 0 ∨ (field ▷ get-value x (y - 1)) > current)
    ∧
    (x ≥ x-max ∨ (field ▷ get-value (x + 1) y) > current)
    ∧
    (y ≥ y-max ∨ (field ▷ get-value x (y + 1)) > current)







let find-low-points field =
    let x-max = field.first.size - 1
    let y-max = field.size - 1
    let low-points! = {}

    0 .. x-max
    ▷ map [col :
        0 .. y-max
        ▷ map [row :
            is-low? col row field
            ? set low-points! = (col → row) :: low-points!
            : () ] ]

    low-points!



let get-low-points-around point basin field =
    let surround-point point direction =
        let delta-point =
            when {
                direction = "up" → {0, -1}
                direction = "down" → {0, 1}
                direction = "left" → {-1, 0}
                direction = "right" → {1, 0}
            }
        let new-pos = {point.first + delta-point.first, point.last + delta-point.last}

        when {
            new-pos.first < 0 ∨ new-pos.first ≥ field.first.size → ()
            new-pos.last < 0 ∨ new-pos.last ≥ field.size → ()
            else → new-pos
        }

    let new-points =
        {
            surround-point point "left"
            surround-point point "up"
            surround-point point "right"
            surround-point point "down"
        }
        ▷ filter is-not-empty?

    new-points
    ▷ filter [ point :
            get-value point.first point.last field < 9
            ∧ does-not-contain? point basin ]

assert
    "get-low-points-around"
    (get-low-points-around {1,1} {} test-field → {{0,1},{1,0},{2,1},{1,2}})
    (get-low-points-around {1,1} {{1,0}} test-field → {{0,1},{2,1},{1,2}})
    (get-low-points-around {0,0} {} test-field → {{1,0},{0,1}})
    (get-low-points-around {9,4} {} test-field → {{8,4}})






let find-basin point field =
    let rec-find-basin point-list basin field =
        when {
            is-empty? point-list → basin
            else →
                rec-find-basin
                    (point-list.tail @ get-low-points-around point-list.first basin field)
                    (point-list.first :: basin)
                    field
        }

    rec-find-basin { point } {} field
    ▷ distinct

assert
    "find-basin"
    (find-basin {9,0} test-field → {{6, 1}, {5, 0}, {6, 0}, {9, 2}, {8, 1}, {7, 0}, {9, 1}, {8, 0}, {9, 0}})
    (find-basin {0,0} test-field → {{0, 1}, {1, 0}, {0, 0}})
    (find-basin {0,3} test-field → {{5, 2}, {4, 1}, {4, 2}, {3, 1}, {4, 3}, {3, 2}, {2, 1}, {3, 3}, {2, 2}, {1, 4}, {2, 3}, {1, 2}, {1, 3}, {0, 3}})
    (find-basin {9,4} test-field → {{7, 2}, {6, 3}, {5, 4}, {7, 3}, {6, 4}, {8, 3}, {7, 4}, {8, 4}, {9, 4}})





let produce-result input =
    let field = make-2d-field input

    find-low-points field
    ▷ map [pos : find-basin pos field]
    ▷ map size
    ▷ sort-desc
    ▷ slice 0 3
    ▷ reduce (*)




test-input
▷ produce-result
▷ print



read-lines "src/test/resources/advent-of-code/day9.input"
▷ produce-result
