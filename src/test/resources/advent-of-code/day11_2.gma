let test-input = {
    "5483143223"
    "2745854711"
    "5264556173"
    "6141336146"
    "6357385478"
    "4167524645"
    "2176841721"
    "6882881134"
    "4846848554"
    "5283751526"
}





let to-matrix input =
    input ▷ map [line :
        line ▷ make-char-list ▷ map [ch :
            ch + 0
        ]
    ]

assert
    "to-matrix"
    ({"123","456"} ▷ to-matrix → {{1, 2, 3}, {4, 5, 6}})



let max-x matrix =
    matrix.first.size - 1

let max-y matrix =
    matrix.size - 1



let to-output matrix =
    matrix

assert
    "to-output"
    ({"123"} ▷ to-matrix → {{1, 2, 3}})





let inc-at x y matrix =
    matrix ▷ map* [line y-pos :
        y-pos ≠ y ? line : line ▷ map* [ i x-pos :
            x-pos ≠ x ? i : i + 1
        ]
    ]

assert
    "inc-at"
    ({"123"} ▷ to-matrix ▷ inc-at 0 0 → {{2, 2, 3}} )
    ({"123"} ▷ to-matrix ▷ inc-at 1 0 → {{1, 3, 3}} )
    ({"012","345"} ▷ to-matrix ▷ inc-at 1 0 → {{0, 2, 2}, {3, 4, 5}})





let matrix-at x y matrix =
    matrix ▷ at* y ▷ at* x

assert
    "matrix-at"
    ({{1,2,3},{4,5,6}} ▷ matrix-at 0 0 → 1)
    ({{1,2,3},{4,5,6}} ▷ matrix-at 0 4 → ())
    ({{1,2,3},{4,5,6}} ▷ matrix-at 4 0 → ())
    ({{1,2,3},{4,5,6}} ▷ matrix-at 1 0 → 2)
    ({{1,2,3},{4,5,6}} ▷ matrix-at 0 1 → 4)




let reset-at x y matrix =
    matrix ▷ map* [line y-pos :
        y-pos ≠ y ? line : line ▷ map* [ i x-pos :
            x-pos ≠ x ? i : 0
        ]
    ]

assert
    "reset-at"
    ({"123"} ▷ to-matrix ▷ reset-at 0 0 → {{0, 2, 3}} )
    ({"123"} ▷ to-matrix ▷ reset-at 1 0 → {{1, 0, 3}} )






let process-charging matrix =
    matrix ▷ map [line :
        line ▷ map [ i :
            i + 1
        ]
    ]

assert
    "process-charging"
    ({"012","345"} ▷ to-matrix ▷ process-charging → {{1,2,3},{4,5,6}})
    ({"0123","3456","0000"} ▷ to-matrix ▷ process-charging → {{1,2,3,4},{4,5,6,7},{1,1,1,1}})







let charge-around x y matrix =
    matrix ▷ map* [ line y-pos :
        (y-pos < y - 1) ∨ (y-pos > y + 1)
        ? line
        : line ▷ map*  [ i x-pos :
            when
                (x-pos < x - 1 ∨ x-pos > x + 1 → i)
                (x = x-pos ∧ y = y-pos → 0)
                (i = 0 → 0)
                (else → i + 1)
        ]
    ]

assert
    "charge-around"
    ({{1,1,1},{1,1,1},{1,1,1}} ▷ charge-around 1 1 → {{2,2,2},{2,0,2},{2,2,2}})
    ({{0,1,1},{1,1,1},{1,1,1}} ▷ charge-around 1 1 → {{0,2,2},{2,0,2},{2,2,2}})
    ({{1,1,1},{1,1,1},{1,1,1}} ▷ charge-around 0 0 → {{0,2,1},{2,2,1},{1,1,1}})
    ({{1,1,1},{1,1,1},{1,1,1}} ▷ charge-around 2 2 → {{1,1,1},{1,2,2},{1,2,0}})






let find-flashing matrix =
    matrix
    ▷ flat-map* [line y-pos :
        line ▷ flat-map* [i x-pos :
            i > 9 ? {{x-pos, y-pos}} : {}
        ]
    ]

assert
    "find-flashing"
    ({{1,1,10}} ▷ find-flashing → {{2,0}})
    ({{1,10,10}} ▷ find-flashing → {{1,0},{2,0}})
    ({{1,1,10},{10,1,1}} ▷ find-flashing → {{2,0},{0,1}})
    ({{1,1,1},{1,1,9}} ▷ find-flashing → {})
    ({{1,1,1},{1,1,1}} ▷ find-flashing ▷ is-empty? → true)





let do-all-flashing flashing matrix =
    flashing ▷ fold matrix [ m pos : break, m ▷ charge-around pos.first pos.last ]

assert
    "do-all-flashing"
    (do-all-flashing {{2,0}} {{1,2,10},{3,4,8}} → {{1, 3, 0}, {3, 5, 9}})
    (do-all-flashing {{2,0}, {2,1}} {{1,2,10},{3,4,10}} → {{1, 4, 0}, {3, 6, 0}})
    (do-all-flashing {{2,0}} {{1,2,10},{3,4,9}} → {{1, 3, 0}, {3, 5, 10}})





let process-flashing matrix =
    let flashing = find-flashing matrix
    is-empty? flashing
    ? matrix
    : matrix ▷ do-all-flashing flashing ▷ process-flashing

assert
    "process-flashing"
    ({{1,2,2},{3,4,8}} ▷ process-flashing → {{1,2,2},{3,4,8}})
    ({{1,2,2},{3,4,10}} ▷ process-flashing → {{1,3,3},{3,5,0}})
    ({{1,2,10},{3,4,9}} ▷ process-flashing → {{1,4,0},{3,6,0}})



let count-flashed matrix =
    let ret! = 0
    0 .. (max-x matrix) ▷ for-each [x :
        0 .. (max-y matrix) ▷ for-each [y :
            matrix-at x y matrix = 0 ? set ret! = ret! + 1 : ()
        ]
    ]

    ret!

assert
    "count-flashed"
    ({{1,2,2},{3,4,8}} ▷ count-flashed → 0)
    ({{1,3,3},{3,5,0}} ▷ count-flashed → 1)
    ({{1,4,0},{3,6,0}} ▷ count-flashed → 2)






let produce-result input =
    let matrix = input ▷ to-matrix

    let rec-produce-result round matrix =
        let new-matrix = matrix ▷ process-charging ▷ process-flashing
        let count = new-matrix ▷ count-flashed
        when {
            count ≥ 100 → round
            else → rec-produce-result (round + 1) new-matrix
        }

    input ▷ to-matrix ▷ rec-produce-result 1








test-input
▷ produce-result
▷ print



read-lines "src/test/resources/advent-of-code/day11.input"
▷ produce-result
