let test-input = {
    "0,9 -> 5,9"
    "8,0 -> 0,8"
    "9,4 -> 3,4"
    "2,2 -> 2,1"
    "7,0 -> 7,4"
    "6,4 -> 2,0"
    "0,9 -> 2,9"
    "3,4 -> 1,4"
    "0,0 -> 8,8"
    "5,5 -> 8,2"
}



let max a b =
    a > b ? a : b

assert
    "max"
    (max 1 2 → 2)
    (max "1" "2" → "2")
    (max "2" "11" → "11")






let split-line-into-coordinates line =
    let components = split line
    let start-cmd = split-by "," components.first
    let end-cmd = split-by "," components.last

    (start-cmd.first + 0 → start-cmd.last + 0) → (end-cmd.first + 0 → end-cmd.last + 0)

assert
    "split-line-into-coordinates"
    (split-line-into-coordinates "0,9 → 5,9" → {{0,9},{5,9}})
    (split-line-into-coordinates "8,0 → 0,8" → {{8,0},{0,8}})






let is-strait? coordinates =
    coordinates.first.first = coordinates.last.first ∨
    coordinates.first.last = coordinates.last.last

assert
    "is-strait?"
    (is-strait? {{"0","9"},{"5","9"}} → true)
    (is-strait? {{"8","0"},{"0","8"}} → false)




let find-max-coordinates list =
    let max-x! = 0
    let max-y! = 0
    list ▷ for-each [coord →
        set max-x! = max (max coord.first.first coord.last.first) max-x!
        set max-y! = max (max coord.first.last coord.last.last) max-y!
    ]
    (max-x! → max-y!)

assert
    "find-max-coordinates"
    (test-input ▷ map split-line-into-coordinates ▷ find-max-coordinates → {9,9})
    ({{{1,1},{1,5}}, {{4,1},{2,1}}} ▷ find-max-coordinates → {4,5})







let create-field x-max y-max =
    0 .. y-max ▷ map [line → 0 .. x-max ▷ map [i → 0]]

assert
    "create-field"
    (create-field 2 2 → {{0,0,0},{0,0,0},{0,0,0}})






let set-position x-pos y-pos field =
    (y-pos > 0 ? field ▷ slice 0 (y-pos) : ())
    @
    { field ▷ at y-pos ▷ map* [col pos →
        pos ≠ x-pos
        ? col
        : col + 1 ] }
    @
    (y-pos < field.size - 1 ? slice (y-pos + 1) (field.size - y-pos - 1) field : ())


assert
    "set-position"
    ({{0,0,0},{0,0,0},{0,0,0}} ▷ set-position 0 0 → {{1,0,0},{0,0,0},{0,0,0}})
    ({{0,0,0},{0,0,0},{0,0,0}} ▷ set-position 2 2 → {{0,0,0},{0,0,0},{0,0,1}})
    ({{0,0,0},{0,0,0},{0,0,0}} ▷ set-position 1 1 → {{0,0,0},{0,1,0},{0,0,0}})
    ({{0,0,0},{1,0,0},{0,0,1}} ▷ set-position 0 1 → {{0,0,0},{2,0,0},{0,0,1}})





let make-line coord =
    let make-horizontal-line coord =
        coord.first.first .. coord.last.first ▷ map [it → {it, coord.first.last}]

    let make-vertical-line coord =
        coord.first.last .. coord.last.last ▷ map [it → {coord.first.first, it}]

    when
        (coord.first.first = coord.last.first → make-vertical-line coord)
        (coord.first.last = coord.last.last → make-horizontal-line coord)
        (else → {})

assert
    "make-line"
    (make-line {{0,0},{2,0}} → {{0,0},{1,0},{2,0}})
    (make-line {{0,2},{0,0}} → {{0,2},{0,1},{0,0}})




let set-positions-from-line field line =
    line ▷ fold field [acc coord → acc ▷ set-position coord.first coord.last]

assert
    "set-positions-from-list"
    (set-positions-from-line (create-field 2 2) {{1,0},{2,0}} → {{0, 1, 1}, {0, 0, 0}, {0, 0, 0}})
    (set-positions-from-line (create-field 2 2) {{1,1},{1,2}} → {{0, 0, 0}, {0, 1, 0}, {0, 1, 0}})
    (set-positions-from-line (create-field 2 2) {} → {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}})




let count-fields-over-1 field =
    let count! = 0
    field
    ▷ for-each [ line →
        line ▷ for-each [ field →
            field > 1
            ? set count! = count! + 1
            : () ] ]
    count!

assert
    "count-fields-over-1"
    ({{0,1,2},{1,0,2}} ▷ count-fields-over-1 → 2 )




let produce-result input =
    let lines =
        input
        ▷ map split-line-into-coordinates
        ▷ filter is-strait?
        ▷ map make-line

    let max-coord = find-max-coordinates lines

    let field = create-field max-coord.first max-coord.last

    let final-field = lines ▷ fold field [acc line → set-positions-from-line acc line]

    final-field ▷ count-fields-over-1


test-input
▷ produce-result
▷ print


read-lines "src/test/resources/advent-of-code/day5.input"
▷ produce-result
