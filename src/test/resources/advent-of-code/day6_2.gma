let test-input = {
    "3,4,3,1,2"
    ""
}


let get-amount fish swarm =
    let current = swarm ▷ at* fish
    current = () ? 0 : current

assert
    "get-amount"
    (get-amount "1" {"1" → 1} → 1)
    (get-amount "2" {"1" → 1} → 0)
    (get-amount "1" {"1" → 2} → 2)





let add-fish-to-swarm fish swarm =
    let current = swarm ▷ get-amount fish
    swarm ▷ copy-with {fish → current + 1}

assert
    "add-fish-to-swarm"
    ({} ▷ add-fish-to-swarm "1" → {"1" → 1})
    ({"1" → 1} ▷ add-fish-to-swarm "1" → {"1" → 2})




let add-fishes-to-swarm fish-list swarm =
    fish-list ▷ fold swarm [swarm fish : add-fish-to-swarm fish swarm]

assert
    "add-fishes-to-swarm"
    ({} ▷ add-fishes-to-swarm {"1", "2"} → {"1" → 1, "2" → 1})
    ({} ▷ add-fishes-to-swarm {"1", "1"} → {"1" → 2})
    ({ "1" → 2 } ▷ add-fishes-to-swarm {"1", "2"} → {"1" → 3, "2" → 1})



let process-day swarm =
    let fish-0 = swarm ▷ get-amount "0"
    let fish-1 = swarm ▷ get-amount "1"
    let fish-2 = swarm ▷ get-amount "2"
    let fish-3 = swarm ▷ get-amount "3"
    let fish-4 = swarm ▷ get-amount "4"
    let fish-5 = swarm ▷ get-amount "5"
    let fish-6 = swarm ▷ get-amount "6"
    let fish-7 = swarm ▷ get-amount "7"
    let fish-8 = swarm ▷ get-amount "8"

    {
        "0" → fish-1
        "1" → fish-2
        "2" → fish-3
        "3" → fish-4
        "4" → fish-5
        "5" → fish-6
        "6" → fish-7 + fish-0
        "7" → fish-8
        "8" → fish-0
    }

assert
    "process-day"
    (process-day {"3" → 1, "1" → 2} → {"0" -> 2, "1" -> 0, "2" -> 1, "3" -> 0, "4" -> 0, "5" -> 0, "6" -> 0, "7" -> 0, "8" -> 0})
    (process-day {"2" → 1, "0" → 2} → {"0" -> 0, "1" -> 1, "2" -> 0, "3" -> 0, "4" -> 0, "5" -> 0, "6" -> 2, "7" -> 0, "8" -> 2})




let count-fish swarm =
    get-properties swarm
    ▷ map [prop :
        swarm ▷ get-amount prop
    ]
    ▷ fold 0 (+)

assert
    "count-fish"
    (count-fish {"0" -> 2, "1" -> 0, "2" -> 1, "3" -> 0, "4" -> 0, "5" -> 0, "6" -> 0, "7" -> 0, "8" -> 0} → 3)
    (count-fish {"0" -> 0, "1" -> 1, "2" -> 0, "3" -> 0, "4" -> 0, "5" -> 0, "6" -> 2, "7" -> 0, "8" -> 2} → 5)






let produce-result input =
    let fish-list = input ▷ at 0 ▷ split-by ","
    let initial-swarm = {} ▷ add-fishes-to-swarm fish-list
    let final-swarm = repeat 256 ▷ fold initial-swarm [swarm i : process-day swarm]
    count-fish final-swarm

test-input
▷produce-result
▷print



read-lines "src/test/resources/advent-of-code/day6.input"
▷ produce-result
