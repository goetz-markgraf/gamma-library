let test-input =
    {
        "00100"
        "11110"
        "10110"
        "10111"
        "10101"
        "01111"
        "00111"
        "11100"
        "10000"
        "11001"
        "00010"
        "01010"
    }


let determine-winning-bit select-most-bits? count-0 count-1 =
    select-most-bits?
    ? count-1 ≥ count-0 ? "1" : "0"
    : count-0 ≤ count-1 ? "0" : "1"



let find-common-bits select-most-bits? input =
    let rec-find-common-bits position select-most-bits? input =
        let determine-bit position select-most-bits? input =
            let bits-in-position =
                input
                |> map [line -> at position line]

            let count-0 = bits-in-position |> filter [bit -> bit = "0"] |> size
            let count-1 = bits-in-position |> filter [bit -> bit = "1"] |> size

            determine-winning-bit select-most-bits? count-0 count-1

        let bit = determine-bit position select-most-bits? input

        let matching-lines = input |> filter [line -> (at position line) = bit]

        when {
            matching-lines.size = 1 ∨ position = matching-lines.first.size
                -> matching-lines.first

            else -> rec-find-common-bits (position + 1) select-most-bits? matching-lines
        }

    rec-find-common-bits 0 select-most-bits? input



let find-most-common-bits = find-common-bits true

let find-least-common-bits = find-common-bits false




let make-binary-from-list number-list =
    number-list
    |> map [ number ->
        number > 0 ? 1 : 0 ]


let make-number-from-binary list =
    list
    |> fold 0 [ acc i ->
        acc * 2 + i
    ]





let produce-result input =

    let oxygen-rate =
        find-most-common-bits input
        |> make-binary-from-list true
        |> make-number-from-binary

    let co2-rate =
        find-least-common-bits input
        |> make-binary-from-list false
        |> make-number-from-binary

    oxygen-rate * co2-rate




test-input
|> produce-result
|> print


'
read-lines "src/test/resources/advent-of-code/day3.input"
|> produce-result
'
